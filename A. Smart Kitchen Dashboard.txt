# Title - A. Smart Kitchen Dashboard

## Status - Proposed

## Context - 
### Requirement (Functional) : 
 - Send inventory updates to central kitchen

### Solution : A Dashboard for smart kitchen 
   Async Alerts from Smart Fridges & POS - Sends alerts when food purchase or inventory updation by sending a message to to Messaging Queue by smart fridge ma
   1.1 Messaging Queue - Publish Async alerts 
        Smart Fridge Purchase MQ
        Smart Fridge Inventory MQ
        POS Inventory MQ
        POS Purchase MQ
   1.2 System API - Consumer for Aync alerts 
        Smart Fridge Purchase System API - Consumer for the alerts of food items purchase from Smart Fridge
        Smart Fridge Inventory System API - Consumer for the alerts of food items inventory from Smart Fridge
        Inventory Management System API - Cosumes Invetory alerts and update to inventory management system 
        POS Inventory System API - onsumer for the alerts of food items inventory from POS
        POS Purchase System API - Consumer for the alerts of food items purchase from POS
   1.3 Process API - Orchestrate and Transform Alerts from Smart Fridge and POS or any new device format for future provisioning
        Inventory Process API - Inventory from POS and Smart fridge would be transformed in this API
        Purchase Process API - Purchase from POS and Smart fridge to be transformed in this API
   1.4 Expereince API - To support Channel specific Dashboard
   
### Dependency & Assumption
        Inventory Management System - As-is solution
        Smart Fridge Management System - As-is solution
        POS Notification - Assumed Feature

## Decision - API-Led Architecture with Message Queue and Micro services
1.  System API, Process API, Experiece API are cloud based microservices scalablity, elasticity would be archieved
2.  A solution is categorises into Inventory module and purchase module which can be indepedently implemented. All the apis can be chagned independentyl to achieve modularity.
3.  Messageing Queue to capture the events which are faul tolerent, database behind inventory management system ensure reliability.
4.  Micro services (System API, Process API, Experiece API)  on cloud provides elasticity in case of high demand of users in pick time (lunch / dinner time / christamas time)
5.  Security - Following Policy on microservices to be applied for security and compliance
        5.1 - Rate limit - No of requests per second and burst time
        5.2 - Authrization Policy - Token based authorization would track and control the requests and provide secured access.

## Consequences
1. A Three Layer Architecture mentioned above would add network delay if deployment model is wrongly choosed.

